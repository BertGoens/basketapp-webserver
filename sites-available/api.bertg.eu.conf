# Allow for gracefull reload & upgrade
upstream api {
    server 127.0.0.1:8000 max_fails=0 fail_timeout=10s weight=1;
    # server 127.0.0.1:8001 max_fails=0 fail_timeout=10s weight=1;
}

server {
        listen 80;
        listen [::]:80;
        server_name api.bertg.eu;
        return 301 https://$server_name$request_uri;
}

server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name api.bertg.eu;
        
        ssl_certificate     /etc/letsencrypt/live/api.bertg.eu/fullchain1.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.bertg.eu/privkey1.pem;

        root /var/www/api.bertg.eu/basketapp-backend/client/;
        index index.html;

        access_log /var/log/nginx/api.bertg.eu.access.log;
        error_log /var/log/nginx/api.bertg.eu.error.log;

        location / {
            # Enforce rate limiter
            # But allow bursts to temporarily override the rate, with no delay
            # This will not allow the total amount of requests to be greater then specified
            limit_req zone=safe burst=20 nodelay;

            # pass request to proxy
            proxy_pass http://api;
            # headers to pass
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /auth/ {
            limit_req zone=auth burst=10 nodelay;

            # pass request to proxy
            proxy_pass http://api;
            # headers to pass
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Serve static files without going through upstreams
        location ~ ^/(coolcat2.jpg|favicon.png|style.css|robots.txt) {
            root /var/www/api.bertg.eu/basketapp-backend/client;
            expires 1h;
        }
}
