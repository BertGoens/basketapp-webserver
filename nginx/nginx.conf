
#user  nobody;
worker_processes  1;

events {
    worker_connections  1024;
}

http {
	# Hide the Nginx-version we are running
    # This sadly does not hide the fact that we use Nginx
    server_tokens   off;
    
    # To hide or modify our header we need to recompile Nginx with a special flag 
    # --add-module=/path-to-headers-more-nginx-module
    # See https://github.com/openresty/headers-more-nginx-module#installation
    # This enables the following command
    # more_set_headers "Server: ";
    # Which does hide our server name

    include       mime.types;
    default_type  text/html;

    # Enable uber fast sending of files
    sendfile        on;

    # Keep clients alive for max 60 seconds, 
    # Protects against 100's of clients trying to occupy all connections
    keepalive_timeout  60;

    # Rate limiting (restrict ip to n requests(r) per second(s))
    # Use the $binary_remote_addr variable since it takes up less space than the
    # the string representation of a client IP address, $remote_addr.
    # We are not yet limiting anything, this is just the set-up
    limit_req_zone $binary_remote_addr zone=limitAuth:10m rate=5r/s;

    gzip on;
    gzip_proxied any;       # Enables gzip for proxied requests
    gzip_disable "msie6";
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_buffers 16 8k;
    # Default only gzip's text/html, we add other relevant types
    gzip_types gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    upstream NodeJS {
        server localhost:8000;
    }

    # HTTP server
    server {
        listen 80;
        listen [::]:80;
        server_name bertg.eu;
        # Force user to https by sending him a redirect 
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name bertg.eu;

        # The size of the ssl key matters a lot!
        # Smaller size = way faster requests/responses
        ssl_certificate          /etc/letsencrypt/live/bertg.eu/fullchain.pem;
        ssl_certificate_key      /etc/letsencrypt/live/bertg.eu/privkey.pem;

        # Set our nginx root directory to serve files from
        # This is our frontend
        root /Users/BertGoens/Programmeren/GitHub/basketapp-frontend/dist;

        # Error & Access logs
        error_log /Users/BertGoens/Programmeren/GitHub/basketapp/logs/error.log error;
        access_log /Users/BertGoens/Programmeren/GitHub/basketapp/logs/access.log;

        location / {
        	root /Users/BertGoens/Programmeren/GitHub/basketapp-frontend/dist;
        	# First look for files in our rootdir
        	# Second pass through the request to our names location @NodeJS if we can't find it
            try_files $uri @NodeJS;
        }

		# Nginx looks in the root dir by default, so we have to make an alias for the favicon
        location /favicon.ico {
    	    alias /Users/BertGoens/Programmeren/GitHub/basketapp-frontend/dist/assets/img/favicon/favicon.ico;
		}

        location /auth/ {
            # Enforce rate limiter on authentication part
            # But allow bursts to temporarily override the rate, with no delay
            # This will not allow the total amount of requests to be greater then specified
            limit_req zone=limitAuth burst=20 nodelay
            proxy_pass http://NodeJS
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Last chance: if a request comes and is not served by the static files in our directory, 
        # We send it to our NodeJS instance to handle it
        location @NodeJS {
            proxy_pass http://NodeJS;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }

}
